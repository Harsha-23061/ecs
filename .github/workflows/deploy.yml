name: Deploy to ECS

on:
  push:
    branches:
      - develop
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push to ECR
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi

          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to ECS (Staging)
        run: |
          set -e

          echo "Fetching current task definition..."
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_STAGING }} \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition' \
            --output json)

          echo "Updating container image to ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}..."
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}" '
            .containerDefinitions[0].image = $IMAGE
            | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredAt, .registeredBy)
          ')

          echo "Registering new task definition..."
          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --region ${{ vars.AWS_REGION }} \
            --cli-input-json "$UPDATED_TASK_DEF" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "Updating ECS service to new revision..."
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_STAGING }} \
            --service ${{ vars.ECS_SERVICE_STAGING }} \
            --task-definition "$NEW_TASK_ARN" \
            --region ${{ vars.AWS_REGION }}

          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER_STAGING }} \
            --services ${{ vars.ECS_SERVICE_STAGING }} \
            --region ${{ vars.AWS_REGION }}

          echo "✅ Staging deployment completed successfully."

  deploy-production:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to ECS (Production)
        run: |
          set -e

          echo "Fetching current task definition..."
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_PRODUCTION }} \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition' \
            --output json)

          echo "Updating container image to ${{ secrets.ECR_REPOSITORY }}:${{ github.ref_name }}..."
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY }}:${{ github.ref_name }}" '
            .containerDefinitions[0].image = $IMAGE
            | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredAt, .registeredBy)
          ')

          echo "Registering new task definition..."
          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --region ${{ vars.AWS_REGION }} \
            --cli-input-json "$UPDATED_TASK_DEF" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "Updating ECS service to new revision..."
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} \
            --service ${{ vars.ECS_SERVICE_PRODUCTION }} \
            --task-definition "$NEW_TASK_ARN" \
            --region ${{ vars.AWS_REGION }}

          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} \
            --services ${{ vars.ECS_SERVICE_PRODUCTION }} \
            --region ${{ vars.AWS_REGION }}

          echo "✅ Production deployment completed successfully."
