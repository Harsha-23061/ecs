name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging or production)'
        required: true
        default: 'staging'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set environment-specific variables
        id: set-vars
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "ECS_CLUSTER=${{ vars.ECS_CLUSTER_PRODUCTION }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ vars.ECS_SERVICE_PRODUCTION }}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=${{ vars.ECS_TASK_DEFINITION_PRODUCTION }}" >> $GITHUB_ENV
          else
            echo "ECS_CLUSTER=${{ vars.ECS_CLUSTER_STAGING }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ vars.ECS_SERVICE_STAGING }}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=${{ vars.ECS_TASK_DEFINITION_STAGING }}" >> $GITHUB_ENV
          fi

      - name: Validate ECS environment variables
        run: |
          echo "Validating ECS environment variables..."
          if [ -z "$ECS_CLUSTER" ]; then
            echo "Error: ECS_CLUSTER is not set!"
            exit 1
          fi
          if [ -z "$ECS_SERVICE" ]; then
            echo "Error: ECS_SERVICE is not set!"
            exit 1
          fi
          if [ -z "$ECS_TASK_DEFINITION" ]; then
            echo "Error: ECS_TASK_DEFINITION is not set!"
            exit 1
          fi
          echo "ECS_CLUSTER: '$ECS_CLUSTER'"
          echo "ECS_SERVICE: '$ECS_SERVICE'"
          echo "ECS_TASK_DEFINITION: '$ECS_TASK_DEFINITION'"

      - name: Debug AWS Region
        run: |
          echo "AWS Region: $AWS_REGION"

      - name: Fetch current task definition
        id: fetch-task
        run: |
          aws ecs describe-task-definition \
            --task-definition "$ECS_TASK_DEFINITION" \
            --region "${{ vars.AWS_REGION }}" \
            --query 'taskDefinition' \
            > task-def.json

      - name: Update container image
        run: |
          IMAGE_TAG="${{ github.sha }}"
          UPDATED_TASK_DEF=$(jq --arg IMAGE "${{ vars.ECR_REPO_URI }}:${IMAGE_TAG}" '
            .containerDefinitions[0].image = $IMAGE
            | del(
                .taskDefinitionArn,
                .revision,
                .status,
                .requiresAttributes,
                .registeredAt,
                .registeredBy,
                .compatibilities,
                .tags
              )
          ' task-def.json)

          echo "$UPDATED_TASK_DEF" > new-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text \
            --region "${{ vars.AWS_REGION }}")
          echo "NEW_TASK_ARN=$NEW_TASK_ARN" >> $GITHUB_ENV

          # Extract family and revision to use in update-service
          NEW_TASK_FAMILY=$(aws ecs describe-task-definition \
            --task-definition "$NEW_TASK_ARN" \
            --query 'taskDefinition.family' \
            --output text \
            --region "${{ vars.AWS_REGION }}")

          NEW_TASK_REVISION=$(aws ecs describe-task-definition \
            --task-definition "$NEW_TASK_ARN" \
            --query 'taskDefinition.revision' \
            --output text \
            --region "${{ vars.AWS_REGION }}")

          NEW_TASK_FAMILY_REVISION="${NEW_TASK_FAMILY}:${NEW_TASK_REVISION}"
          echo "NEW_TASK_FAMILY_REVISION=$NEW_TASK_FAMILY_REVISION" >> $GITHUB_ENV

      - name: Debug ECS vars before update-service
        run: |
          echo "Cluster length: ${#ECS_CLUSTER}"
          echo "Service length: ${#ECS_SERVICE}"
          echo "Task Definition ARN length: ${#NEW_TASK_ARN}"
          echo "Task Definition Family:Revision length: ${#NEW_TASK_FAMILY_REVISION}"
          echo "Cluster raw: '${ECS_CLUSTER}'"
          echo "Service raw: '${ECS_SERVICE}'"
          echo "Task Definition ARN raw: '${NEW_TASK_ARN}'"
          echo "Task Definition Family:Revision raw: '${NEW_TASK_FAMILY_REVISION}'"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "$NEW_TASK_FAMILY_REVISION" \
            --region "${{ vars.AWS_REGION }}" \
            --debug
